import streamlit as st
from datetime import datetime, timedelta
from calendar import isleap
from docx import Document
from io import BytesIO

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", layout="centered")
st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º")

PROGRAM_OPTIONS = ["–°1", "–ö–ë", "–ö–õ"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏—Ü–µ–Ω–∑–∏–π
if "programs" not in st.session_state:
    st.session_state.programs = []

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
with st.form("add_program_form"):
    col1, col2 = st.columns(2)
    with col1:
        program_name = st.selectbox("–ü—Ä–æ–≥—Ä–∞–º–º–∞", PROGRAM_OPTIONS)
        start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è")
    with col2:
        end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
        license_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ü–µ–Ω–∑–∏–π", min_value=1, step=1)

    price_annual = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤ (–∑–∞ 1 –ª–∏—Ü–µ–Ω–∑–∏—é, ‚ÇΩ)", min_value=0.0, step=100.0)

    submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
    if submitted:
        if start_date > end_date:
            st.error("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
        else:
            st.session_state.programs.append({
                "name": program_name,
                "start_date": datetime.combine(start_date, datetime.min.time()),
                "end_date": datetime.combine(end_date, datetime.min.time()),
                "count": license_count,
                "price_annual": price_annual
            })
            st.success("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
if st.session_state.programs:
    st.markdown("### üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
    for idx, p in enumerate(st.session_state.programs):
        st.markdown(
            f"**{idx + 1}.** {p['name']}: —Å {p['start_date'].strftime('%d.%m.%Y')} –ø–æ {p['end_date'].strftime('%d.%m.%Y')}, "
            f"{p['count']} –ª–∏—Ü–µ–Ω–∑–∏–π –ø–æ {p['price_annual']:.2f} ‚ÇΩ"
        )

# üí∞ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º –¥–Ω—è–º
def calculate_price(start_date, end_date, annual_price):
    total = 0.0
    current = start_date
    while current <= end_date:
        year_days = 366 if isleap(current.year) else 365
        total += annual_price / year_days
        current += timedelta(days=1)
    return round(total, 2)

# üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é") and st.session_state.programs:
    doc = Document()
    doc.add_heading("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", level=1)

    table = doc.add_table(rows=1, cols=6)
    table.style = 'Table Grid'
    hdr = table.rows[0].cells
    hdr[0].text = "‚Ññ"
    hdr[1].text = "–ü—Ä–æ–≥—Ä–∞–º–º–∞"
    hdr[2].text = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
    hdr[3].text = "–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –ª–∏—Ü–µ–Ω–∑–∏–∏"
    hdr[4].text = "–ö–æ–ª-–≤–æ –ª–∏—Ü–µ–Ω–∑–∏–π"
    hdr[5].text = "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ"

    for idx, p in enumerate(st.session_state.programs, 1):
        per_license = calculate_price(p["start_date"], p["end_date"], p["price_annual"])
        total_price = round(per_license * p["count"], 2)

        row = table.add_row().cells
        row[0].text = str(idx)
        row[1].text = f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≠–í–ú ¬´{p['name']}¬ª"
        row[2].text = f"—Å {p['start_date'].strftime('%d.%m.%Y')} –ø–æ {p['end_date'].strftime('%d.%m.%Y')}"
        row[3].text = f"{per_license:,.2f}".replace(",", " ").replace(".", ",") + " ‚ÇΩ"
        row[4].text = str(p["count"])
        row[5].text = f"{total_price:,.2f}".replace(",", " ").replace(".", ",") + " ‚ÇΩ"

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (.docx)",
        data=buffer,
        file_name="—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# üîÅ –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
if st.button("üîÅ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ"):
    st.session_state.programs = []
    st.success("–û—á–∏—â–µ–Ω–æ.")
