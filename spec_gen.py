import streamlit as st
from datetime import datetime
from docx import Document
from docx.shared import Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from io import BytesIO
import pandas as pd

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", layout="wide")
st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º")

PROGRAM_OPTIONS = [
    "Case.one",
    "Case.one —Ç–∞—Ä–∏—Ñ –£–ø—Ä–∞–≤–ª—è–π –¥–µ–ª–∞–º–∏",
    "Doc.one",
    "Bot.one",
    "Casebook —Ç–∞—Ä–∏—Ñ Standard",
    "Casebook —Ç–∞—Ä–∏—Ñ PRO",
    "Caselook",
    "Casebook API"
]

if "rows" not in st.session_state:
    st.session_state.rows = [{
        "name": PROGRAM_OPTIONS[0],
        "start_date": datetime.today().date(),
        "end_date": datetime.today().date(),
        "count": 1,
        "price_annual": 0.0
    }]

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –ø–æ–ª—è–º
st.markdown("""
<style>
th {text-align: center !important;}
</style>
<table style='width:100%; font-weight: bold;'>
<tr>
<td style='width:20%'>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</td>
<td style='width:20%'>–ù–∞—á–∞–ª–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞</td>
<td style='width:20%'>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞</td>
<td style='width:10%'>–ö–æ–ª-–≤–æ</td>
<td style='width:20%'>‚ÇΩ –∑–∞ 12 –º–µ—Å</td>
<td style='width:10%'></td>
</tr>
</table>
""", unsafe_allow_html=True)

# –§–æ—Ä–º–∞ —Å—Ç—Ä–æ–∫ –≤–≤–æ–¥–∞
valid_rows = []
for i, row in enumerate(st.session_state.rows):
    cols = st.columns([2, 2, 2, 1, 2, 0.5, 0.5])
    with cols[0]:
        row["name"] = st.selectbox("", PROGRAM_OPTIONS, index=PROGRAM_OPTIONS.index(row["name"]), key=f"name_{i}")
    with cols[1]:
        row["start_date"] = st.date_input("", value=row["start_date"], format="DD.MM.YYYY", key=f"start_{i}")
    with cols[2]:
        row["end_date"] = st.date_input("", value=row["end_date"], format="DD.MM.YYYY", key=f"end_{i}")
    with cols[3]:
        row["count"] = st.number_input("", min_value=1, step=1, value=row["count"], key=f"count_{i}")
    with cols[4]:
        row["price_annual"] = st.number_input("", min_value=0.0, step=100.0, format="%.2f", value=row["price_annual"], key=f"price_{i}")
    with cols[5]:
        if st.button("üóëÔ∏è", key=f"del_{i}"):
            st.session_state.rows.pop(i)
            st.experimental_rerun()
    with cols[6]:
        if i == len(st.session_state.rows) - 1:
            if st.button("‚ûï", key=f"add_{i}"):
                st.session_state.rows.append({
                    "name": PROGRAM_OPTIONS[0],
                    "start_date": datetime.today().date(),
                    "end_date": datetime.today().date(),
                    "count": 1,
                    "price_annual": 0.0
                })

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± –æ—à–∏–±–∫–µ –¥–∞—Ç—ã
    if row["end_date"] < row["start_date"]:
        st.warning(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")
    elif row["price_annual"] > 0:
        valid_rows.append(row)

# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
if st.button("üìä –†–∞—Å—á—ë—Ç"):
    def calculate_price(start_date, end_date, annual_price):
        days = (end_date - start_date).days + 1
        return round(annual_price / 365 * days, 2)

    def generate_specification_docx(data_rows):
        doc = Document()
        style = doc.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(9)

        doc.add_paragraph("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", style='Normal').runs[0].bold = True
        table = doc.add_table(rows=1, cols=7)
        table.style = 'Table Grid'

        headers = [
            "‚Ññ",
            "–ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≠–í–ú, –ø—Ä–∞–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –õ–∏—Ü–µ–Ω–∑–∏–∞—Ç—É",
            "–ö–æ–ª-–≤–æ –õ–∏—Ü–µ–Ω–∑–∏–π*",
            "–°—Ä–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–æ",
            "–¶–µ–Ω–∞, —Ä—É–±. –†–§",
            "–°—É–º–º–∞, —Ä—É–±. –†–§"
        ]

        hdr_cells = table.rows[0].cells
        for i, header in enumerate(headers):
            hdr_cells[i].text = header
            run = hdr_cells[i].paragraphs[0].runs[0]
            run.font.name = 'Times New Roman'
            run.font.size = Pt(9)
            shd = OxmlElement('w:shd')
            shd.set(qn('w:fill'), "D9D9D9")
            hdr_cells[i]._tc.get_or_add_tcPr().append(shd)

        total_sum = 0
        for idx, row in enumerate(valid_rows, 1):
            cells = table.add_row().cells
            name = f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≠–í–ú {row['name']}"
            count = row["count"]
            period = f"—Å {row['start_date'].strftime('%d.%m.%Y')} –ø–æ {row['end_date'].strftime('%d.%m.%Y')}"
            per_license = calculate_price(row['start_date'], row['end_date'], row["price_annual"])
            total = round(per_license * count, 2)
            total_sum += total

            values = [
                str(idx),
                '–ê–û "–ü—Ä–∞–≤–æ.—Ä—É"',
                name,
                str(count),
                period,
                f"{per_license:,.2f}".replace(",", " ").replace(".", ","),
                f"{total:,.2f}".replace(",", " ").replace(".", ",")
            ]
            for i, val in enumerate(values):
                cells[i].text = val
                run = cells[i].paragraphs[0].runs[0]
                run.font.name = 'Times New Roman'
                run.font.size = Pt(9)

        total_row = table.add_row().cells
        total_row[0].merge(total_row[5])
        total_row[0].text = "–ò—Ç–æ–≥–æ –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:"
        run = total_row[0].paragraphs[0].runs[0]
        run.font.name = 'Times New Roman'
        run.font.size = Pt(9)
        total_row[6].text = f"{total_sum:,.2f}".replace(",", " ").replace(".", ",")
        run2 = total_row[6].paragraphs[0].runs[0]
        run2.font.name = 'Times New Roman'
        run2.font.size = Pt(9)

        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        return buffer

    df = pd.DataFrame([{
        "‚Ññ": idx + 1,
        "–ü—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å": '–ê–û "–ü—Ä–∞–≤–æ.—Ä—É"',
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≠–í–ú, –ø—Ä–∞–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –õ–∏—Ü–µ–Ω–∑–∏–∞—Ç—É": f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≠–í–ú {r['name']}",
        "–ö–æ–ª-–≤–æ –ª–∏—Ü–µ–Ω–∑–∏–π": r["count"],
        "–°—Ä–æ–∫": f"–æ—Ç {r['start_date'].strftime('%d.%m.%Y')} –¥–æ {r['end_date'].strftime('%d.%m.%Y')} –≥–≥.",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏, —Ä—É–±. –†–§": f"{calculate_price(r['start_date'], r['end_date'], r['price_annual']):,.2f}".replace(",", " ").replace(".", ","),
        "–°—É–º–º–∞, —Ä—É–±. –†–§": f"{calculate_price(r['start_date'], r['end_date'], r['price_annual']) * r['count']:,.2f}".replace(",", " ").replace(".", ",")
    } for idx, r in enumerate(valid_rows)])

    st.markdown("### üìã –†–∞—Å—á—ë—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:")
    st.table(df)

    docx_buffer = generate_specification_docx(valid_rows)
    st.download_button(
        label="üìÖ –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (.docx)",
        data=docx_buffer,
        file_name="—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
