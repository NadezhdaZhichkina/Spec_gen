import streamlit as st
from datetime import datetime, timedelta
from calendar import isleap
from docx import Document
from io import BytesIO

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", layout="centered")
st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—è–º")

# –í–≤–æ–¥ –æ–±—â–µ–π –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
end_date_input = st.date_input("üìÖ –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ—Ö –ª–∏—Ü–µ–Ω–∑–∏–π (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)")
end_date = datetime.combine(end_date_input, datetime.min.time()) if end_date_input else None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–∏—Ü–µ–Ω–∑–∏–π
if "licenses" not in st.session_state:
    st.session_state.licenses = []

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
with st.form("add_license_form"):
    col1, col2 = st.columns(2)
    with col1:
        start_date_input = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏", key="start_date")
    with col2:
        price_annual = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤ (‚ÇΩ)", min_value=0.0, step=100.0, key="price")

    submitted = st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é")
    if submitted and start_date_input and price_annual and end_date:
        start_date = datetime.combine(start_date_input, datetime.min.time())
        if start_date > end_date:
            st.error("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π!")
        else:
            st.session_state.licenses.append({
                "start_date": start_date,
                "price_annual": price_annual
            })
            st.success("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–π
if st.session_state.licenses:
    st.markdown("### üìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏:")
    for idx, lic in enumerate(st.session_state.licenses):
        st.markdown(
            f"**{idx + 1}.** –° {lic['start_date'].strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')} ‚Äî "
            f"{lic['price_annual']:.2f} ‚ÇΩ / –≥–æ–¥"
        )

# üî¢ –§—É–Ω–∫—Ü–∏—è —Å —É—á—ë—Ç–æ–º –≤–∏—Å–æ–∫–æ—Å–Ω—ã—Ö –ª–µ—Ç
def calculate_total_price(start_date, end_date, annual_price):
    total_price = 0.0
    current_date = start_date
    while current_date <= end_date:
        year_length = 366 if isleap(current_date.year) else 365
        daily_rate = annual_price / year_length
        total_price += daily_rate
        current_date += timedelta(days=1)
    return round(total_price, 2)

# üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é") and end_date and st.session_state.licenses:
    doc = Document()
    doc.add_heading("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", level=1)

    table = doc.add_table(rows=1, cols=3)
    table.style = 'Table Grid'
    table.autofit = True
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = "‚Ññ"
    hdr_cells[1].text = "–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"
    hdr_cells[2].text = "–°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)"

    for idx, lic in enumerate(st.session_state.licenses, 1):
        start = lic["start_date"]
        total_price = calculate_total_price(start, end_date, lic["price_annual"])

        row_cells = table.add_row().cells
        row_cells[0].text = str(idx)
        row_cells[1].text = f"—Å {start.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
        row_cells[2].text = f"{total_price:,.2f}".replace(",", " ").replace(".", ",")

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (.docx)",
        data=buffer,
        file_name="—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# üîÅ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
if st.button("üîÅ –û—á–∏—Å—Ç–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏"):
    st.session_state.licenses = []
    st.success("–°–ø–∏—Å–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–π –æ—á–∏—â–µ–Ω.")
