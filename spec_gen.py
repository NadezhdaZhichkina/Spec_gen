import streamlit as st
from datetime import datetime, timedelta
from calendar import isleap
from docx import Document
from io import BytesIO

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", layout="wide")
st.title("üìÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º")

PROGRAM_OPTIONS = ["–°1", "–ö–ë", "–ö–õ"]

# –•—Ä–∞–Ω–∏–º —Å—Ç—Ä–æ–∫–∏ –≤ session_state
if "rows" not in st.session_state:
    st.session_state.rows = []

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É
if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É"):
    st.session_state.rows.append({
        "name": PROGRAM_OPTIONS[0],
        "start_date": datetime.today().date(),
        "end_date": datetime.today().date(),
        "count": 1,
        "price_annual": 0.0
    })

# –§–æ—Ä–º–∞ —Å—Ç—Ä–æ–∫ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö)
valid_rows = []
for i, row in enumerate(st.session_state.rows):
    cols = st.columns([1.2, 1, 1, 1, 1])
    with cols[0]:
        row["name"] = st.selectbox(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ {i+1}", PROGRAM_OPTIONS, key=f"name_{i}")
    with cols[1]:
        row["start_date"] = st.date_input(f"–ù–∞—á–∞–ª–æ {i+1}", value=row["start_date"], key=f"start_{i}")
    with cols[2]:
        row["end_date"] = st.date_input(f"–û–∫–æ–Ω—á–∞–Ω–∏–µ {i+1}", value=row["end_date"], key=f"end_{i}")
    with cols[3]:
        row["count"] = st.number_input(f"–ö–æ–ª-–≤–æ {i+1}", min_value=1, step=1, value=row["count"], key=f"count_{i}")
    with cols[4]:
        row["price_annual"] = st.number_input(f"‚ÇΩ –∑–∞ 12 –º–µ—Å {i+1}", min_value=0.0, step=100.0, value=row["price_annual"], key=f"price_{i}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if row["start_date"] <= row["end_date"] and row["price_annual"] > 0:
        valid_rows.append(row)

# üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —É—á—ë—Ç–æ–º –≤–∏—Å–æ–∫–æ—Å–Ω—ã—Ö –ª–µ—Ç
def calculate_price(start_date, end_date, annual_price):
    total = 0.0
    current = start_date
    while current <= end_date:
        year_days = 366 if isleap(current.year) else 365
        total += annual_price / year_days
        current += timedelta(days=1)
    return round(total, 2)

# üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
if valid_rows and st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é"):
    doc = Document()
    doc.add_heading("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", level=1)

    table = doc.add_table(rows=1, cols=6)
    table.style = 'Table Grid'
    hdr = table.rows[0].cells
    hdr[0].text = "‚Ññ"
    hdr[1].text = "–ü—Ä–æ–≥—Ä–∞–º–º–∞"
    hdr[2].text = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è"
    hdr[3].text = "–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –ª–∏—Ü–µ–Ω–∑–∏–∏"
    hdr[4].text = "–ö–æ–ª-–≤–æ"
    hdr[5].text = "–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ"

    st.markdown("### üßæ –†–∞—Å—á—ë—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:")

    for idx, p in enumerate(valid_rows, 1):
        start_dt = datetime.combine(p["start_date"], datetime.min.time())
        end_dt = datetime.combine(p["end_date"], datetime.min.time())
        per_license = calculate_price(start_dt, end_dt, p["price_annual"])
        total_price = round(per_license * p["count"], 2)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        start_str = p["start_date"].strftime('%d.%m.%Y')
        end_str = p["end_date"].strftime('%d.%m.%Y')

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Word —Ç–∞–±–ª–∏—Ü—É
        row = table.add_row().cells
        row[0].text = str(idx)
        row[1].text = f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≠–í–ú {p['name']}"
        row[2].text = f"—Å {start_str} –ø–æ {end_str}"
        row[3].text = f"{per_license:,.2f}".replace(",", " ").replace(".", ",") + " ‚ÇΩ"
        row[4].text = str(p["count"])
        row[5].text = f"{total_price:,.2f}".replace(",", " ").replace(".", ",") + " ‚ÇΩ"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        st.markdown(
            f"**{idx}.** –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –≠–í–ú {p['name']} —Å {start_str} –ø–æ {end_str}, "
            f"{p['count']} —à—Ç. ‚Äî {per_license:,.2f} ‚ÇΩ –∑–∞ 1, **{total_price:,.2f} ‚ÇΩ –≤—Å–µ–≥–æ**"
            .replace(",", " ").replace(".", ",")
        )

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (.docx)",
        data=buffer,
        file_name="—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# –û—á–∏—Å—Ç–∫–∞
if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"):
    st.session_state.rows = []
    st.success("–í—Å–µ —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
